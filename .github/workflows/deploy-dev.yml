name: Deploy Node.js Backend to AWS EC2

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: yarn install

      - name: Generate Prisma migration
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }} # Agregar DATABASE_URL como variable de entorno
        run: yarn prisma-generate

      - name: Run Prisma migration
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }} # Agregar DATABASE_URL como variable de entorno
        run: yarn prisma-migrate

      - name: Build the app
        run: yarn build
      #IMAGE_NAME="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}"
      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Set timestamp
        run: echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      - name: Build and tag Docker image
        run: |
          IMAGE_NAME="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/sweepaccess-backend"
          docker build --no-cache -t $IMAGE_NAME:latest -t $IMAGE_NAME:$TIMESTAMP .

      - name: Push Docker image to Amazon ECR
        run: |
          IMAGE_NAME="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/sweepaccess-backend"
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$TIMESTAMP

      - name: Clean up old Docker images
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          REPOSITORY="${{ secrets.AWS_ECR_REPOSITORY }}"
          aws ecr list-images --repository-name $REPOSITORY --region $AWS_REGION --query 'imageIds[*]' --output json > images.json
          IMAGE_IDS=$(aws ecr describe-images --repository-name $REPOSITORY --region $AWS_REGION --query 'sort_by(imageDetails,&imagePushedAt)[0:-3].imageTags[*]' --output text)
          for IMAGE_ID in $IMAGE_IDS; do
            aws ecr batch-delete-image --repository-name $REPOSITORY --image-ids imageTag=$IMAGE_ID --region $AWS_REGION
          done

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to EC2 using AWS SSM
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets '[{"Key":"instanceIds","Values":["i-04c6cf55f2164dc65"]}]' \
            --parameters '{"commands":["aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 886436968289.dkr.ecr.us-east-1.amazonaws.com", "docker pull 886436968289.dkr.ecr.us-east-1.amazonaws.com/sweepaccess-backend:latest", "docker run -d --name sweepaccess-backend -p 80:80 886436968289.dkr.ecr.us-east-1.amazonaws.com/sweepaccess-backend:latest"]}' \
            --region us-east-1
